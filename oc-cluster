#!/bin/bash

OPENSHIFT_HOME_DIR=${OPENSHIFT_HOME:-$HOME/.oc}
OPENSHIFT_CACHE_DIR=${OPENSHIFT_CACHE:-/var/lib/origin}

function up {
  local _profile="$1"
  echo "$_profile"

  if [ "$_profile" == "" ]
  then
     echo "Using default profile"
     _profile="default"
  fi

  # This is where oc cluster stores it's data
  local OPENSHIFT_HOST_DATA_DIR=$OPENSHIFT_HOME_DIR/$_profile/data
  local OPENSHIFT_HOST_CONFIG_DIR=$OPENSHIFT_HOME_DIR/$_profile/config
  local OPENSHIFT_HOST_VOLUMES_DIR=$OPENSHIFT_HOME_DIR/$_profile/volumes

  if test ! -d $OPENSHIFT_HOST_CONFIG_DIR; then
     mkdir -p $OPENSHIFT_HOST_CONFIG_DIR
  fi

  if test ! -d $OPENSHIFT_HOST_DATA_DIR; then
    mkdir -p $OPENSHIFT_HOST_DATA_DIR
  fi

  if test ! -d $OPENSHIFT_HOST_VOLUMES_DIR; then
    mkdir -p $OPENSHIFT_HOST_VOLUMES_DIR
  fi

  shift # Remove profile name

  # Create the profile markfile
  echo "${_profile}" > $OPENSHIFT_HOME_DIR/active_profile

  echo "oc cluster up --public-hostname 127.0.0.1 \
                --host-data-dir $OPENSHIFT_HOST_DATA_DIR \
                --host-config-dir $OPENSHIFT_HOST_CONFIG_DIR \
                --use-existing-config \
                $@"
  oc cluster up --public-hostname 127.0.0.1 \
                --host-data-dir $OPENSHIFT_HOST_DATA_DIR \
                --host-config-dir $OPENSHIFT_HOST_CONFIG_DIR \
                --use-existing-config \
                "$@"
  
  #Add developer as sudoer
  oc adm policy add-cluster-role-to-group sudoer system:authenticated \
         --config="${OPENSHIFT_HOST_CONFIG_DIR}/master/admin.kubeconfig" \
         --context="default/127-0-0-1:8443/system:admin"

  echo "Any user is sudoer. They can execute commands with '--as=system:admin'"
}

function down {
  status
  local _status=$?
  if [ $_status -ne 0 ]
  then  
    echo "Bringing the cluster down"
    oc cluster down
    rm -f $OPENSHIFT_HOME_DIR/active_profile
  fi
}

function status {
  if [[ "$(docker ps -f name=origin -q)" == "" ]]
  then
     echo "no cluster running"
     return 0
  else
     echo "oc cluster running. Current profile <$([ -f $OPENSHIFT_HOME_DIR/active_profile ] && cat $OPENSHIFT_HOME_DIR/active_profile || echo 'unknown')>"
     return 1
  fi
}

function destroy {
  echo "destroy"
}

function list {
  echo "Profiles:"
  for i in `ls $OPENSHIFT_HOME_DIR`
  do
     echo "- $i"
  done
}

function into {
  echo "Execing into the Origin Container"
  docker exec -it origin /bin/bash
}

function console {
  echo "https://127.0.0.1:8443/console"
}

function create-volume {
  local __volume=$1
  local __size=$2
  local __path=$3

  [ $# -lt 1 ] && echo "volumename is required" && exit 1

  __profile=$(cat $OPENSHIFT_HOME_DIR/active_profile)
  local __path=$OPENSHIFT_HOME_DIR/${__profile}/volumes/${__volume}

  if test ! -d $__path; then
    mkdir -p $__path
  fi

cat <<-EOF > /tmp/pv.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: ${__volume}
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Recycle
  hostPath:
    path: ${__path}
EOF

oc create -f /tmp/pv.yaml --as=system:admin
rm /tmp/pv.yaml

echo "Volume created in ${__path}"
}

function help {
        echo "Valid commands:"
        echo "oc cluster up [profile] [OPTIONS]"
        echo "oc cluster down"
        echo "oc cluster destroy"
        echo "oc cluster list"
        echo "oc cluster status"
        echo "oc cluster into"
        echo "oc cluster console"
        echo "oc cluster create-volume volumeName [size|10Gi] [path|$HOME/.oc/<profile>/volumes/<volumeName>]"
}

# Use -gt 1 to consume two arguments per pass in the loop (e.g. each
# argument has a corresponding value to go with it).
# Use -gt 0 to consume one or more arguments per pass in the loop (e.g.
# some arguments don't have a corresponding value to go with it such
# as in the --default example).
if [[ $# -gt 0 ]]
then
   key="$1"
   case $key in
      up)
        shift # past argument
        up "$@"
        ;;
      down)
        shift # past argument
        down "$@"
        ;;
      destroy)
        shift # past argument
        destroy "$@"
        ;;
      list)
        shift # past argument
        list "$@"
        ;;
      status)
        shift
        status "$@"
        ;;
      into)
        shift
        into "$@"
        ;;
      create-volume)
        shift
        create-volume "$@"
        ;;
      console)
        shift
        console "$@"
        ;;
      -h|help)
        help        
        ;;
      *)
        # unknown option
        echo "Unknown option. Show help"
        help        
        ;;
   esac
else
   help
fi


